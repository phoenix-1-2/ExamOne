---
openapi: 3.0.0
info:
  title: ExamOne API
  description: ExamOne APIs for Backend
  contact:
    email: phoenix.redstone.04@gmail.com
  version: "v1.0.0"
servers:
  - url: https://virtserver.swaggerhub.com/phoenix-1-2/ExamOne/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: Teacher
    description: Secured Teacher-only calls
  - name: Student
    description: Secured Student-only calls

security:
  - BearerAuth: []

paths:
  /student/login:
    post:
      tags:
        - Student
      summary: For Login authentication
      description: By passing the appropriate username and password student can login into the ExamOne Web Server.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginSchema"
      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Authentication Successfull"
                  auth_key:
                    type: string
                    example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        "404":
          description: "Email-Id Not found"
        "401":
          description: "Wrong Password"

  /student/register:
    post:
      tags:
        - Student
      summary: Registration of a student
      description: Registration of a student
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentSchema"
      responses:
        "201":
          description: "Successfully Registrated"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Registration Successfull"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /teacher/login:
    post:
      tags:
        - Teacher
      summary: For Login authentication
      description: By passing the appropriate username and password Teacher can login into the ExamOne Web Server.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginSchema"

      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Authentication Successfull"
                  auth_key:
                    type: string
                    example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        "404":
          description: "Email-Id Not found"
        "401":
          description: "Wrong Password"

  /teacher/register:
    post:
      tags:
        - Teacher
      summary: Registration of a Teacher
      description: Registration of a Teacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeacherSchema"
      responses:
        "201":
          description: "Successfully Registrated"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Registration Successfull"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /teacher/profile:
    get:
      tags:
        - Teacher
      summary: Get Teacher Profile
      description: Get Teacher Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get Teacher Details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeacherSchema"
        "404":
          description: "User Not Found"
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
        "401":
          description: Unauthorized User
    put:
      tags:
        - Teacher
      summary: Update Teacher Records
      description: Update Teacher Records
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeacherSchema"
      responses:
        "200":
          description: "Successfully updated"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Updatation Successfull"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: User Not Found

  /student/profile:
    get:
      tags:
        - Student
      summary: Get Student Profile
      description: Get Student Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get Student Details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentSchema"
        "404":
          description: "User Not Found"
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
        "401":
          description: Student not authenticated

    put:
      tags:
        - Student
      summary: Update Student Records
      description: Update Student Records
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentSchema"
      responses:
        "200":
          description: "Successfully updated"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Updatation Successfull"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: User Not Found

  /teacher/exam/:
    post:
      tags:
        - Teacher
      summary: For Creating Examination
      description: Create Exam with appropriate parameters
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        content:
          application/json:
            schema:
              properties:
                examination_name:
                  type: string
                  example: "End-Term Examination"
                batch:
                  type: string
                  example: "B11"
                total_marks:
                  type: number
                  example: 100.0
                exam_period:
                  type: number
                  example: 1.5
                expiry_date:
                  type: string
                  example: "2017-07-21T17:32:28Z"
                questions_and_solutions:
                  type: object
                  properties:
                    mcq:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                            example: "What is mcq ?"
                          option1:
                            type: string
                            example: "option1"
                          option2:
                            type: string
                            example: "option3"
                          option3:
                            type: string
                            example: "option3"
                          option4:
                            type: string
                            example: "option4"
                          solution:
                            type: string
                            example: "option1/option2/option3/option4"
                    subjective:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                            example: "What is subjective ?"
                          solution:
                            type: string
                            example: "Subjective Answer"
                    coding:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                            example: "Code Linear Search."
                          test_cases:
                            type: array
                            items:
                              type: object
                              properties:
                                test_case:
                                  type: string
                                  example: "5 15 20 7 \n 17"
                                result:
                                  type: string
                                  example: "false"
      responses:
        "201":
          description: "Successfully created the examination"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Created Successfully"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: User Not Found

  /teacher/exam/{exam_id}/:
    delete:
      tags:
        - Teacher
      summary: For Deleting Examination
      description: Delete Exam
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "204":
          description: "Successfully deleted the examination"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Deleted Successfully"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: Exam not found

  /teacher/exam/_all:
    get:
      tags:
        - Teacher
      summary: For getting all the Examinations
      description: Get all Exams
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get all examinations"
          content:
            application/json:
              schema:
                properties:
                  exams:
                    type: array
                    items:
                      type: object
                      properties:
                        examination_name:
                          type: string
                          example: "End-Term Examination"
                        batch:
                          type: string
                          example: "B11"
                        total_marks:
                          type: number
                          example: 100.0
                        exam_period:
                          type: number
                          example: 1.5
                        expiry_date:
                          type: string
                          example: "2017-07-21T17:32:28Z"

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access

  /student/exam/undone_exams:
    get:
      tags:
        - Student
      summary: For getting all the Undone Examinations
      description: Get all Undone Exams
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get all undone examinations"
          content:
            application/json:
              schema:
                properties:
                  exams:
                    type: array
                    items:
                      type: object
                      properties:
                        examination_name:
                          type: string
                          example: "End-Term Examination"
                        batch:
                          type: string
                          example: "B11"
                        total_marks:
                          type: number
                          example: 100.0
                        exam_period:
                          type: number
                          example: 1.5
                        expiry_date:
                          type: string
                          example: "2017-07-21T17:32:28Z"

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access

  /student/exam/{exam_id}/_info:
    get:
      tags:
        - Student
      summary: For Examination Information
      description: Get Exam Info
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get Exam Info"
          content:
            application/json:
              schema:
                properties:
                  exam_info:
                    type: object
                    properties:
                      examination_name:
                        type: string
                        example: "End-Term Examination"
                      batch:
                        type: string
                        example: "B11"
                      total_marks:
                        type: number
                        example: 100.0
                      exam_period:
                        type: number
                        example: 1.5
                      expiry_date:
                        type: string
                        example: "2017-07-21T17:32:28Z"
                      total_mcqs:
                        type: integer
                        example: 5
                      total_subjective_questions:
                        type: integer
                        example: 5
                      total_coding_problems:
                        type: integer
                        example: 2

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access

  /student/exam/{exam_id}:
    get:
      tags:
        - Student
      summary: For Examination Question
      description: Get Exam Question
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: "Get Exam Questions"
          content:
            application/json:
              schema:
                properties:
                  questions_and_solutions:
                    type: object
                    properties:
                      total_mcqs:
                        type: integer
                        example: 5
                      total_subjective_questions:
                        type: integer
                        example: 5
                      total_coding_problems:
                        type: integer
                        example: 2
                      mcq:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                              example: "question_id_1"
                            question:
                              type: string
                              example: "What is mcq ?"
                            option1:
                              type: string
                              example: "option1"
                            option2:
                              type: string
                              example: "option3"
                            option3:
                              type: string
                              example: "option3"
                            option4:
                              type: string
                              example: "option4"
                      subjective:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                              example: "question_id_1"
                            question:
                              type: string
                              example: "What is subjective ?"
                      coding:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                              example: "question_id_1"
                            question:
                              type: string
                              example: "Code Linear Search."
                            limited_test_cases:
                              type: array
                              items:
                                type: object
                                properties:
                                  test_case:
                                    type: string
                                    example: "5 15 20 7 \n 17"
                                  result:
                                    type: string
                                    example: "false"

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access

  /student/exam/{exam_id}/evaluate:
    post:
      tags:
        - Student
      summary: For Evaluation of Examination
      description: Evalaute the Examination
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                student_solutions:
                  type: array
                  items:
                    type: object
                    properties:
                      mcq:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                            solution:
                              type: string
                      subjective:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                            solution:
                              type: string
                      coding:
                        type: array
                        items:
                          type: object
                          properties:
                            question_id:
                              type: string
                            source_code:
                              type: string
      responses:
        "200":
          description: Examination Evaluated
          content:
            application/json:
              schema:
                properties:
                  student_name:
                    type: string
                    example: XYZ
                  teacher_name:
                    type: string
                    example: XYZ
                  batch:
                    type: string
                    example: B11
                  marks:
                    type: number
                    example: 98
                  exam_start_date_time:
                    type: string
                    example: "2017-07-21T17:32:28Z"
                  total_marks:
                    type: number
                    example: 100
                  grade:
                    type: string
                    example: "A+"

  /student/results/{exam_id}:
    get:
      tags:
        - Student
      summary: For Result of Examination
      description: Examination Result
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Get the examination result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExamSchema"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: Examination Not Found

  /teacher/results/{exam_id}/{student_id}:
    get:
      tags:
        - Teacher
      summary: For Result of Examination
      description: Examination Result
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: student_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Get the examination result of student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExamSchema"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized Access
        "404":
          description: Examination Not Found

  /teacher/results/{exam_id}:
    get:
      tags:
        - Teacher
      summary: Batch Result
      description: Examination Result of Batch
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: exam_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Get the examination result of student
          content:
            application/json:
              schema:
                properties:
                  exam_name:
                    type: string
                    example: "End-Term Examination"
                  teacher_name:
                    type: string
                    example: "XYZ"
                  max_score:
                    type: number
                    example: 100
                  avg_score:
                    type: number
                    example: 75
                  highest_score:
                    type: object
                    properties:
                      student_name:
                        type: string
                        example: "Nikhil"
                      grade:
                        type: string
                        example: "A+"
                      score:
                        type: number
                        example: 99
                      url:
                        type: string
                        example: "http://example.com/teacher/results/<exam_id>/<student_id>"
                  minimum_score:
                    type: object
                    properties:
                      student_name:
                        type: string
                        example: "Nikhil"
                      score:
                        type: number
                        example: 99
                      grade:
                        type: string
                        example: "A+"
                      url:
                        type: string
                        example: "http://example.com/teacher/results/<exam_id>/<student_id>"
                  batch_report:
                    type: array
                    items:
                      type: object
                      properties:
                        student_name:
                          type: string
                          example: "Nikhil"
                        exam_start_date_time:
                          type: string
                          example: "2017-07-21T17:32:28Z"
                        score:
                          type: number
                          example: 89
                        grade:
                          type: string
                          example: "A"
                        url:
                          type: string
                          example: "http://example.com/teacher/results/<exam_id>/<student_id>"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
  schemas:
    TeacherSchema:
      type: object
      properties:
        email:
          type: string
          example: "xyz@example.com"
        password:
          type: string
          example: "Xyz@123"
        image_url:
          type: string
          example: "https://res.cloudinary.com/demo/image/upload/image.jpg"
        name:
          type: string
          example: "XYZ"
        date_of_birth:
          type: string
          example: "2019-05-17"
        education_qualification:
          type: array
          items:
            type: object
            properties:
              degree_name:
                type: string
                example: "Bachelor's Degree"
              institution_name:
                type: string
                example: "IIT Delhi"
              CGPA:
                type: integer
                example: "8.0"
              from_year:
                type: integer
                example: "2018"
              to_year:
                type: integer
                example: "2022"
    LoginSchema:
      properties:
        email_id:
          type: string
          example: "xyz@gmail.com"
        password:
          type: string
          example: "Xyz@123"
    StudentSchema:
      type: object
      properties:
        email:
          type: string
          example: "xyz@example.com"
        password:
          type: string
          example: "Xyz@123"
        image_url:
          type: string
          example: "https://res.cloudinary.com/demo/image/upload/image.jpg"
        name:
          type: string
          example: "XYZ"
        batch:
          type: string
          example: "A"
        date_of_birth:
          type: string
          example: "2019-05-17"
        education_qualification:
          type: array
          items:
            type: object
            properties:
              degree_name:
                type: string
                example: "Bachelor's Degree"
              institution_name:
                type: string
                example: "IIT Delhi"
              CGPA:
                type: integer
                example: "8.0"
              from_year:
                type: integer
                example: "2018"
              to_year:
                type: integer
                example: "2022"
    ExamSchema:
      properties:
        exam_name:
          type: string
          example: "End-Term Examination"
        exam_start_date_time:
          type: string
          example: "2017-07-21T17:32:28Z"
        student_name:
          type: string
          example: "XYZ"
        teacher_name:
          type: string
          example: "XYZ"
        score:
          type: number
          example: 72
        max_score:
          type: number
          example: 100
        grade:
          type: string
          example: "B+"
        report:
          type: object
          properties:
            mcq:
              type: object
              properties:
                total_marks:
                  type: number
                  example: 100
                marks:
                  type: number
                  example: 100
                exam_set:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: number
                        example: "question_id_1"
                      question:
                        type: string
                        example: "What is Mcq ? "
                      option1:
                        type: string
                        example: "option1"
                      option2:
                        type: string
                        example: "option2"
                      option3:
                        type: string
                        example: "option3"
                      option4:
                        type: string
                        example: "option4"
                      student_solution:
                        type: string
                        example: "option1"
                      original_solution:
                        type: string
                        example: "option2"
                      marks_acheived:
                        type: number
                        example: 0
                      total_marks:
                        type: number
                        example: 1
            subjective:
              type: object
              properties:
                total_marks:
                  type: number
                  example: 100
                marks:
                  type: number
                  example: 100
                exam_set:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: number
                        example: "question_id_1"
                      student_solution:
                        type: string
                        example: "This is the solution"
                      original_solution:
                        type: string
                        example: "Solution is Okay!"
                      marks_acheived:
                        type: number
                        example: 5
                      total_marks:
                        type: number
                        example: 10
            coding:
              type: object
              properties:
                total_marks:
                  type: number
                  example: 10
                marks:
                  type: number
                  example: 15
                exam_set:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: number
                        example: "question_id_1"
                      question:
                        type: string
                        example: "Linear Search"
                      student_source_code:
                        type: string
                        example: "#include<iostream.h> \n"
                      test_cases:
                        type: array
                        items:
                          type: object
                          properties:
                            test_case_1:
                              type: string
                              example: "10 7 1 5 \n 2"
                            student_result:
                              type: string
                              example: "false"
                            original_result:
                              type: string
                              example: "false"
                            passed:
                              type: boolean
                              example: "true"
                      total_test_cases_success:
                        type: number
                        example: 10
                      total_test_cases_count:
                        type: number
                        example: 12
